"""
Django settings for acd_app project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dz-we%5r9_zaw85asyi^%_^qw$qonw&b%k3&&sjy%2vgw#r2$l'
#DB_ENGINE = os.environ.get('TOKEN')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#DB_ENGINE = os.environ.get('TOKEN')

ALLOWED_HOSTS = ['*']
#DB_ENGINE = os.environ.get('TOKEN')

X_FRAME_OPTIONS = 'SAMEORIGIN'

DATA_UPLOAD_MAX_NUMBER_FIELDS = 50000

#SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Armazena sessões no banco de dados (padrão)

# Application definition

INSTALLED_APPS = [
    'django.contrib.humanize',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'acd_lst',
    'tempus_dominus',
    'widget_tweaks',
       
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]



ROOT_URLCONF = 'acd_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'base_templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'acd_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

"""
DB_ENGINE = os.environ.get('TOKEN')
DB_NAME= os.environ.get('DB_NAME')
DB_USER= os.environ.get('DB_USER')
DB_PASSWORD= os.environ.get('DB_PASSWORD')
DB_HOST= os.environ.get('DB_HOST')
DB_PORT= os.environ.get('DB_PORT')
"""

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': '_app',
#         'USER': 'gres',
#         'PASSWORD': 'a',
#         'HOST': 'p',
#         'PORT': '2',
#     }
# }



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/



# URLs base para arquivos estáticos e de mídia
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# Diretórios para arquivos estáticos
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),  # Arquivos estáticos globais
    os.path.join(BASE_DIR, "acd_lst/static"), # Arquivos estáticos da aplicação

]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # Diretório para coleta de arquivos estáticos

# Diretório para arquivos de mídia
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

"""
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = '/vol/static'
MEDIA_ROOT = '/vol/media'
"""

TEMPUS_DOMINUS_LOCALIZE = True


FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

TOKEN='AGU1234!'
#TOKEN = os.environ.get('D_TOKEN')
#MEDIA_URL = '/media/'
#MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

